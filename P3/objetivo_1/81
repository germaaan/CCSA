package oldapi;
import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;

public class CoeffMapper extends MapReduceBase implements Mapper<LongWritable, Text, Double, Double, Double, Double> {
        private static final int MISSING = 9999;
        double keyX;
        double keyY;
        double valueX;
        double valueY;

		public void map(LongWritable key, Text value, OutputCollector<DoubleWritable, DoubleWritable, DoubleWritable, DoubleWritable> output, Reporter reporter) throws IOException {
                String line = value.toString();
                String[] parts = line.split(",");
                double[] pairs = toDouble(Arrays.copyOf(parts, parts.length-1));

                for (int i = 0; i < pairs.length; i++) {
				    for (int j = i; j < pairs.length; j++) {
					    output.collect(new DoubleWritable(i), new DoubleWritable(j), new DoubleWritable(pairs[i]), new DoubleWritable(pairs[j]));
				    }
			    }
        }

		public double[] toDouble(String[] tokens) {
			double[] myArray = new double[tokens.length];
			for (int i = 0; i < tokens.length; i++) {
				if (i == 24) {
					myArray[i] = Double.parseDouble("0.1");
				} else {
					myArray[i] = Double.parseDouble(tokens[i]);
				}
			}

			return myArray;
		}
}

